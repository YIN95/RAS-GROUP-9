// Generated by gencpp from file arduino_servo_control/SetServoAnglesRequest.msg
// DO NOT EDIT!


#ifndef ARDUINO_SERVO_CONTROL_MESSAGE_SETSERVOANGLESREQUEST_H
#define ARDUINO_SERVO_CONTROL_MESSAGE_SETSERVOANGLESREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arduino_servo_control
{
template <class ContainerAllocator>
struct SetServoAnglesRequest_
{
  typedef SetServoAnglesRequest_<ContainerAllocator> Type;

  SetServoAnglesRequest_()
    : angle_servo_0(0)
    , angle_servo_1(0)  {
    }
  SetServoAnglesRequest_(const ContainerAllocator& _alloc)
    : angle_servo_0(0)
    , angle_servo_1(0)  {
  (void)_alloc;
    }



   typedef int64_t _angle_servo_0_type;
  _angle_servo_0_type angle_servo_0;

   typedef int64_t _angle_servo_1_type;
  _angle_servo_1_type angle_servo_1;





  typedef boost::shared_ptr< ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetServoAnglesRequest_

typedef ::arduino_servo_control::SetServoAnglesRequest_<std::allocator<void> > SetServoAnglesRequest;

typedef boost::shared_ptr< ::arduino_servo_control::SetServoAnglesRequest > SetServoAnglesRequestPtr;
typedef boost::shared_ptr< ::arduino_servo_control::SetServoAnglesRequest const> SetServoAnglesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace arduino_servo_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d092f7e1f5b91100a4b5a0975cd73973";
  }

  static const char* value(const ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd092f7e1f5b91100ULL;
  static const uint64_t static_value2 = 0xa4b5a0975cd73973ULL;
};

template<class ContainerAllocator>
struct DataType< ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arduino_servo_control/SetServoAnglesRequest";
  }

  static const char* value(const ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
int64 angle_servo_0\n\
int64 angle_servo_1\n\
";
  }

  static const char* value(const ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle_servo_0);
      stream.next(m.angle_servo_1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetServoAnglesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arduino_servo_control::SetServoAnglesRequest_<ContainerAllocator>& v)
  {
    s << indent << "angle_servo_0: ";
    Printer<int64_t>::stream(s, indent + "  ", v.angle_servo_0);
    s << indent << "angle_servo_1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.angle_servo_1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDUINO_SERVO_CONTROL_MESSAGE_SETSERVOANGLESREQUEST_H
