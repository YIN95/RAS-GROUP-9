// Generated by gencpp from file uarm/MoveToRequest.msg
// DO NOT EDIT!


#ifndef UARM_MESSAGE_MOVETOREQUEST_H
#define UARM_MESSAGE_MOVETOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace uarm
{
template <class ContainerAllocator>
struct MoveToRequest_
{
  typedef MoveToRequest_<ContainerAllocator> Type;

  MoveToRequest_()
    : position()
    , eef_orientation(0.0)
    , move_mode(0)
    , movement_duration()
    , ignore_orientation(false)
    , interpolation_type(0)
    , check_limits(false)  {
    }
  MoveToRequest_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , eef_orientation(0.0)
    , move_mode(0)
    , movement_duration()
    , ignore_orientation(false)
    , interpolation_type(0)
    , check_limits(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef float _eef_orientation_type;
  _eef_orientation_type eef_orientation;

   typedef int32_t _move_mode_type;
  _move_mode_type move_mode;

   typedef ros::Duration _movement_duration_type;
  _movement_duration_type movement_duration;

   typedef uint8_t _ignore_orientation_type;
  _ignore_orientation_type ignore_orientation;

   typedef int32_t _interpolation_type_type;
  _interpolation_type_type interpolation_type;

   typedef uint8_t _check_limits_type;
  _check_limits_type check_limits;



  enum {
    ABSOLUTE_MOVEMENT = 0,
    RELATIVE_MOVEMENT = 1,
    NO_INTERPOLATION = 0,
    CUBIC_INTERPOLATION = 1,
    LINEAR_INTERPOLATION = 2,
  };


  typedef boost::shared_ptr< ::uarm::MoveToRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uarm::MoveToRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveToRequest_

typedef ::uarm::MoveToRequest_<std::allocator<void> > MoveToRequest;

typedef boost::shared_ptr< ::uarm::MoveToRequest > MoveToRequestPtr;
typedef boost::shared_ptr< ::uarm::MoveToRequest const> MoveToRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uarm::MoveToRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uarm::MoveToRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace uarm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::uarm::MoveToRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uarm::MoveToRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uarm::MoveToRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uarm::MoveToRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uarm::MoveToRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uarm::MoveToRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uarm::MoveToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab030bae93172a56ee5d849ac8b8bebb";
  }

  static const char* value(const ::uarm::MoveToRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab030bae93172a56ULL;
  static const uint64_t static_value2 = 0xee5d849ac8b8bebbULL;
};

template<class ContainerAllocator>
struct DataType< ::uarm::MoveToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uarm/MoveToRequest";
  }

  static const char* value(const ::uarm::MoveToRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uarm::MoveToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
geometry_msgs/Point position\n\
float32 eef_orientation\n\
int32 move_mode\n\
duration movement_duration\n\
bool ignore_orientation\n\
int32 interpolation_type\n\
bool check_limits\n\
\n\
\n\
int32 ABSOLUTE_MOVEMENT = 0\n\
int32 RELATIVE_MOVEMENT = 1\n\
\n\
\n\
\n\
\n\
\n\
\n\
int32 NO_INTERPOLATION = 0\n\
int32 CUBIC_INTERPOLATION = 1\n\
int32 LINEAR_INTERPOLATION = 2\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::uarm::MoveToRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uarm::MoveToRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.eef_orientation);
      stream.next(m.move_mode);
      stream.next(m.movement_duration);
      stream.next(m.ignore_orientation);
      stream.next(m.interpolation_type);
      stream.next(m.check_limits);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveToRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uarm::MoveToRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uarm::MoveToRequest_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "eef_orientation: ";
    Printer<float>::stream(s, indent + "  ", v.eef_orientation);
    s << indent << "move_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.move_mode);
    s << indent << "movement_duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.movement_duration);
    s << indent << "ignore_orientation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ignore_orientation);
    s << indent << "interpolation_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.interpolation_type);
    s << indent << "check_limits: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.check_limits);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UARM_MESSAGE_MOVETOREQUEST_H
