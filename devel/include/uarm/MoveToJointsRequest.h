// Generated by gencpp from file uarm/MoveToJointsRequest.msg
// DO NOT EDIT!


#ifndef UARM_MESSAGE_MOVETOJOINTSREQUEST_H
#define UARM_MESSAGE_MOVETOJOINTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uarm
{
template <class ContainerAllocator>
struct MoveToJointsRequest_
{
  typedef MoveToJointsRequest_<ContainerAllocator> Type;

  MoveToJointsRequest_()
    : j0(0.0)
    , j1(0.0)
    , j2(0.0)
    , j3(0.0)
    , move_mode(0)
    , movement_duration()
    , interpolation_type(0)
    , check_limits(false)  {
    }
  MoveToJointsRequest_(const ContainerAllocator& _alloc)
    : j0(0.0)
    , j1(0.0)
    , j2(0.0)
    , j3(0.0)
    , move_mode(0)
    , movement_duration()
    , interpolation_type(0)
    , check_limits(false)  {
  (void)_alloc;
    }



   typedef float _j0_type;
  _j0_type j0;

   typedef float _j1_type;
  _j1_type j1;

   typedef float _j2_type;
  _j2_type j2;

   typedef float _j3_type;
  _j3_type j3;

   typedef int32_t _move_mode_type;
  _move_mode_type move_mode;

   typedef ros::Duration _movement_duration_type;
  _movement_duration_type movement_duration;

   typedef int32_t _interpolation_type_type;
  _interpolation_type_type interpolation_type;

   typedef uint8_t _check_limits_type;
  _check_limits_type check_limits;



  enum {
    ABSOLUTE_MOVEMENT = 0,
    RELATIVE_MOVEMENT = 1,
    NO_INTERPOLATION = 0,
    CUBIC_INTERPOLATION = 1,
    LINEAR_INTERPOLATION = 2,
  };


  typedef boost::shared_ptr< ::uarm::MoveToJointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uarm::MoveToJointsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveToJointsRequest_

typedef ::uarm::MoveToJointsRequest_<std::allocator<void> > MoveToJointsRequest;

typedef boost::shared_ptr< ::uarm::MoveToJointsRequest > MoveToJointsRequestPtr;
typedef boost::shared_ptr< ::uarm::MoveToJointsRequest const> MoveToJointsRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uarm::MoveToJointsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uarm::MoveToJointsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace uarm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::uarm::MoveToJointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uarm::MoveToJointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uarm::MoveToJointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uarm::MoveToJointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uarm::MoveToJointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uarm::MoveToJointsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uarm::MoveToJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1317bde3345e465c5901b25c6961719b";
  }

  static const char* value(const ::uarm::MoveToJointsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1317bde3345e465cULL;
  static const uint64_t static_value2 = 0x5901b25c6961719bULL;
};

template<class ContainerAllocator>
struct DataType< ::uarm::MoveToJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uarm/MoveToJointsRequest";
  }

  static const char* value(const ::uarm::MoveToJointsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uarm::MoveToJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
float32 j0\n\
float32 j1\n\
float32 j2\n\
float32 j3\n\
int32 move_mode\n\
duration movement_duration\n\
int32 interpolation_type\n\
bool check_limits\n\
\n\
\n\
int32 ABSOLUTE_MOVEMENT = 0\n\
int32 RELATIVE_MOVEMENT = 1\n\
\n\
\n\
\n\
\n\
\n\
\n\
int32 NO_INTERPOLATION = 0\n\
int32 CUBIC_INTERPOLATION = 1\n\
int32 LINEAR_INTERPOLATION = 2\n\
\n\
";
  }

  static const char* value(const ::uarm::MoveToJointsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uarm::MoveToJointsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.j0);
      stream.next(m.j1);
      stream.next(m.j2);
      stream.next(m.j3);
      stream.next(m.move_mode);
      stream.next(m.movement_duration);
      stream.next(m.interpolation_type);
      stream.next(m.check_limits);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveToJointsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uarm::MoveToJointsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uarm::MoveToJointsRequest_<ContainerAllocator>& v)
  {
    s << indent << "j0: ";
    Printer<float>::stream(s, indent + "  ", v.j0);
    s << indent << "j1: ";
    Printer<float>::stream(s, indent + "  ", v.j1);
    s << indent << "j2: ";
    Printer<float>::stream(s, indent + "  ", v.j2);
    s << indent << "j3: ";
    Printer<float>::stream(s, indent + "  ", v.j3);
    s << indent << "move_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.move_mode);
    s << indent << "movement_duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.movement_duration);
    s << indent << "interpolation_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.interpolation_type);
    s << indent << "check_limits: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.check_limits);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UARM_MESSAGE_MOVETOJOINTSREQUEST_H
