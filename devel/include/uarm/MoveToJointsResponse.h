// Generated by gencpp from file uarm/MoveToJointsResponse.msg
// DO NOT EDIT!


#ifndef UARM_MESSAGE_MOVETOJOINTSRESPONSE_H
#define UARM_MESSAGE_MOVETOJOINTSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uarm
{
template <class ContainerAllocator>
struct MoveToJointsResponse_
{
  typedef MoveToJointsResponse_<ContainerAllocator> Type;

  MoveToJointsResponse_()
    : j0(0.0)
    , j1(0.0)
    , j2(0.0)
    , j3(0.0)
    , elapsed()
    , error(false)  {
    }
  MoveToJointsResponse_(const ContainerAllocator& _alloc)
    : j0(0.0)
    , j1(0.0)
    , j2(0.0)
    , j3(0.0)
    , elapsed()
    , error(false)  {
  (void)_alloc;
    }



   typedef float _j0_type;
  _j0_type j0;

   typedef float _j1_type;
  _j1_type j1;

   typedef float _j2_type;
  _j2_type j2;

   typedef float _j3_type;
  _j3_type j3;

   typedef ros::Duration _elapsed_type;
  _elapsed_type elapsed;

   typedef uint8_t _error_type;
  _error_type error;





  typedef boost::shared_ptr< ::uarm::MoveToJointsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uarm::MoveToJointsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MoveToJointsResponse_

typedef ::uarm::MoveToJointsResponse_<std::allocator<void> > MoveToJointsResponse;

typedef boost::shared_ptr< ::uarm::MoveToJointsResponse > MoveToJointsResponsePtr;
typedef boost::shared_ptr< ::uarm::MoveToJointsResponse const> MoveToJointsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uarm::MoveToJointsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uarm::MoveToJointsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace uarm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::uarm::MoveToJointsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uarm::MoveToJointsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uarm::MoveToJointsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uarm::MoveToJointsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uarm::MoveToJointsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uarm::MoveToJointsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uarm::MoveToJointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69d7a513721b240d81ffb22ed1f2e600";
  }

  static const char* value(const ::uarm::MoveToJointsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69d7a513721b240dULL;
  static const uint64_t static_value2 = 0x81ffb22ed1f2e600ULL;
};

template<class ContainerAllocator>
struct DataType< ::uarm::MoveToJointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uarm/MoveToJointsResponse";
  }

  static const char* value(const ::uarm::MoveToJointsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uarm::MoveToJointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
float32 j0\n\
float32 j1\n\
float32 j2\n\
float32 j3\n\
duration elapsed\n\
bool error\n\
\n\
";
  }

  static const char* value(const ::uarm::MoveToJointsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uarm::MoveToJointsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.j0);
      stream.next(m.j1);
      stream.next(m.j2);
      stream.next(m.j3);
      stream.next(m.elapsed);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveToJointsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uarm::MoveToJointsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uarm::MoveToJointsResponse_<ContainerAllocator>& v)
  {
    s << indent << "j0: ";
    Printer<float>::stream(s, indent + "  ", v.j0);
    s << indent << "j1: ";
    Printer<float>::stream(s, indent + "  ", v.j1);
    s << indent << "j2: ";
    Printer<float>::stream(s, indent + "  ", v.j2);
    s << indent << "j3: ";
    Printer<float>::stream(s, indent + "  ", v.j3);
    s << indent << "elapsed: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.elapsed);
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UARM_MESSAGE_MOVETOJOINTSRESPONSE_H
