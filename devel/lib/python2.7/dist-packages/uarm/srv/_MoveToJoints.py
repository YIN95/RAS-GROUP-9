# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uarm/MoveToJointsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class MoveToJointsRequest(genpy.Message):
  _md5sum = "1317bde3345e465c5901b25c6961719b"
  _type = "uarm/MoveToJointsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float32 j0
float32 j1
float32 j2
float32 j3
int32 move_mode
duration movement_duration
int32 interpolation_type
bool check_limits


int32 ABSOLUTE_MOVEMENT = 0
int32 RELATIVE_MOVEMENT = 1






int32 NO_INTERPOLATION = 0
int32 CUBIC_INTERPOLATION = 1
int32 LINEAR_INTERPOLATION = 2

"""
  # Pseudo-constants
  ABSOLUTE_MOVEMENT = 0
  RELATIVE_MOVEMENT = 1
  NO_INTERPOLATION = 0
  CUBIC_INTERPOLATION = 1
  LINEAR_INTERPOLATION = 2

  __slots__ = ['j0','j1','j2','j3','move_mode','movement_duration','interpolation_type','check_limits']
  _slot_types = ['float32','float32','float32','float32','int32','duration','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       j0,j1,j2,j3,move_mode,movement_duration,interpolation_type,check_limits

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveToJointsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.j0 is None:
        self.j0 = 0.
      if self.j1 is None:
        self.j1 = 0.
      if self.j2 is None:
        self.j2 = 0.
      if self.j3 is None:
        self.j3 = 0.
      if self.move_mode is None:
        self.move_mode = 0
      if self.movement_duration is None:
        self.movement_duration = genpy.Duration()
      if self.interpolation_type is None:
        self.interpolation_type = 0
      if self.check_limits is None:
        self.check_limits = False
    else:
      self.j0 = 0.
      self.j1 = 0.
      self.j2 = 0.
      self.j3 = 0.
      self.move_mode = 0
      self.movement_duration = genpy.Duration()
      self.interpolation_type = 0
      self.check_limits = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4f4iB().pack(_x.j0, _x.j1, _x.j2, _x.j3, _x.move_mode, _x.movement_duration.secs, _x.movement_duration.nsecs, _x.interpolation_type, _x.check_limits))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.movement_duration is None:
        self.movement_duration = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 33
      (_x.j0, _x.j1, _x.j2, _x.j3, _x.move_mode, _x.movement_duration.secs, _x.movement_duration.nsecs, _x.interpolation_type, _x.check_limits,) = _get_struct_4f4iB().unpack(str[start:end])
      self.check_limits = bool(self.check_limits)
      self.movement_duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4f4iB().pack(_x.j0, _x.j1, _x.j2, _x.j3, _x.move_mode, _x.movement_duration.secs, _x.movement_duration.nsecs, _x.interpolation_type, _x.check_limits))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.movement_duration is None:
        self.movement_duration = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 33
      (_x.j0, _x.j1, _x.j2, _x.j3, _x.move_mode, _x.movement_duration.secs, _x.movement_duration.nsecs, _x.interpolation_type, _x.check_limits,) = _get_struct_4f4iB().unpack(str[start:end])
      self.check_limits = bool(self.check_limits)
      self.movement_duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f4iB = None
def _get_struct_4f4iB():
    global _struct_4f4iB
    if _struct_4f4iB is None:
        _struct_4f4iB = struct.Struct("<4f4iB")
    return _struct_4f4iB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from uarm/MoveToJointsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class MoveToJointsResponse(genpy.Message):
  _md5sum = "69d7a513721b240d81ffb22ed1f2e600"
  _type = "uarm/MoveToJointsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float32 j0
float32 j1
float32 j2
float32 j3
duration elapsed
bool error

"""
  __slots__ = ['j0','j1','j2','j3','elapsed','error']
  _slot_types = ['float32','float32','float32','float32','duration','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       j0,j1,j2,j3,elapsed,error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveToJointsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.j0 is None:
        self.j0 = 0.
      if self.j1 is None:
        self.j1 = 0.
      if self.j2 is None:
        self.j2 = 0.
      if self.j3 is None:
        self.j3 = 0.
      if self.elapsed is None:
        self.elapsed = genpy.Duration()
      if self.error is None:
        self.error = False
    else:
      self.j0 = 0.
      self.j1 = 0.
      self.j2 = 0.
      self.j3 = 0.
      self.elapsed = genpy.Duration()
      self.error = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4f2iB().pack(_x.j0, _x.j1, _x.j2, _x.j3, _x.elapsed.secs, _x.elapsed.nsecs, _x.error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.elapsed is None:
        self.elapsed = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.j0, _x.j1, _x.j2, _x.j3, _x.elapsed.secs, _x.elapsed.nsecs, _x.error,) = _get_struct_4f2iB().unpack(str[start:end])
      self.error = bool(self.error)
      self.elapsed.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4f2iB().pack(_x.j0, _x.j1, _x.j2, _x.j3, _x.elapsed.secs, _x.elapsed.nsecs, _x.error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.elapsed is None:
        self.elapsed = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.j0, _x.j1, _x.j2, _x.j3, _x.elapsed.secs, _x.elapsed.nsecs, _x.error,) = _get_struct_4f2iB().unpack(str[start:end])
      self.error = bool(self.error)
      self.elapsed.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f2iB = None
def _get_struct_4f2iB():
    global _struct_4f2iB
    if _struct_4f2iB is None:
        _struct_4f2iB = struct.Struct("<4f2iB")
    return _struct_4f2iB
class MoveToJoints(object):
  _type          = 'uarm/MoveToJoints'
  _md5sum = '112a3367014960c210096553f33b43c1'
  _request_class  = MoveToJointsRequest
  _response_class = MoveToJointsResponse
